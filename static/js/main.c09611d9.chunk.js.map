{"version":3,"sources":["models/ITask.tsx","CreateTaskPopup.tsx","components/BoardTask.tsx","App.tsx","index.tsx"],"names":["IState","useStyles","makeStyles","theme","formControl","margin","spacing","minWidth","CreateTaskPopup","props","classes","useState","open","setOpen","TODO","state","setState","name","setName","description","setDescription","assignee","setAssignee","handleClose","newTask","id","Math","floor","random","onSave","Stack","direction","Button","sx","background","variant","endIcon","onClick","Dialog","onClose","maxWidth","fullWidth","DialogTitle","color","DialogContent","Input","placeholder","width","value","onChange","e","target","FormControl","className","InputLabel","Select","labelId","event","MenuItem","IN_PROGRESS","IN_REVIEW","DONE","DialogActions","autoFocus","BoardTask","task","style","App","tasks","setTasks","AppBar","position","Toolbar","Typography","flexGrow","fontWeight","textAlign","oldTasks","filter","t","map","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c09611d9.chunk.js","sourcesContent":["export enum IState {\r\n    TODO,\r\n    IN_PROGRESS,\r\n    IN_REVIEW,\r\n    DONE\r\n}\r\n\r\nexport type ITask = {\r\n    id: string;\r\n    name: string;\r\n    description: string;\r\n    assignee: string;\r\n    state: IState;\r\n}","import React, { useState } from \"react\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Dialog from \"@mui/material/Dialog\";\r\nimport DialogActions from \"@mui/material/DialogActions\";\r\nimport DialogContent from \"@mui/material/DialogContent\";\r\nimport DialogTitle from \"@mui/material/DialogTitle\";\r\nimport { Input, Stack } from \"@mui/material\";\r\nimport AddCircle from \"@mui/icons-material/AddCircleRounded\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport InputLabel from \"@mui/material/InputLabel\";\r\nimport { MenuItem } from \"@mui/material\";\r\nimport FormControl from \"@mui/material/FormControl\";\r\nimport Select from \"@mui/material/Select\";\r\nimport {IState, ITask} from './models/ITask';\r\n\r\nconst useStyles = makeStyles((theme: any) => ({\r\n  formControl: {\r\n    margin: (theme.spacing = \"2\"),\r\n    minWidth: 200,\r\n  },\r\n}));\r\n\r\ntype Props = {\r\n  onSave: (task: ITask) => void,\r\n};\r\n\r\nexport default function CreateTaskPopup(props: Props) {\r\n  const classes = useStyles();\r\n\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const [state, setState] = useState<IState>(IState.TODO);\r\n  const [name, setName] = useState(\"\");\r\n  const [description, setDescription] = useState(\"\");\r\n  const [assignee, setAssignee] = useState(\"\");\r\n\r\n  const HandleChange = (event: any) => {\r\n    setState(event.target.value);\r\n  };\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    let newTask: ITask = {\r\n      id: `${Math.floor(Math.random() * 200000)}`,\r\n      name,\r\n      description,\r\n      assignee,\r\n      state,\r\n    };\r\n    props.onSave(newTask);\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Stack spacing={2} direction=\"row\">\r\n        <Button\r\n          sx={{ background: \"#050A30\" }}\r\n          variant=\"contained\"\r\n          endIcon={<AddCircle />}\r\n          onClick={() => setOpen(true)}\r\n        >\r\n          Add a task\r\n        </Button>\r\n      </Stack>\r\n      <Dialog\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"alert-dialog-title\"\r\n        aria-describedby=\"alert-dialog-description\"\r\n        maxWidth=\"md\"\r\n        fullWidth\r\n      >\r\n        <DialogTitle\r\n          id=\"alert-dialog-title\"\r\n          sx={{ background: \"#000C66\" }}\r\n          color=\"white\"\r\n        >\r\n          {\"New task\"}\r\n        </DialogTitle>\r\n        <DialogContent sx={{ background: \"#000C66\" }}>\r\n          <Stack spacing={3}>\r\n            <Input\r\n              placeholder=\"Add a task name\"\r\n              sx={{\r\n                width: \"300px\",\r\n                color: \"white\",\r\n              }}\r\n              value={name}\r\n              onChange={(e) => setName(e.target.value)}\r\n            />\r\n            <Input\r\n              placeholder=\"Add a description...\"\r\n              sx={{\r\n                width: \"300px\",\r\n                color: \"white\",\r\n              }}\r\n              value={description}\r\n              onChange={(e) => setDescription(e.target.value)}\r\n            />\r\n            <Input\r\n              placeholder=\"Add User\"\r\n              sx={{\r\n                width: \"300px\",\r\n                color: \"white\",\r\n              }}\r\n              value={assignee}\r\n              onChange={(e) => setAssignee(e.target.value)}\r\n            />\r\n            <FormControl\r\n              className={classes.formControl}\r\n              sx={{ background: \"white\" }}\r\n            >\r\n              <InputLabel sx={{ color: \"black\" }}>\r\n                Set Status\r\n              </InputLabel>\r\n              <Select\r\n                labelId=\"select-demo\"\r\n                id=\"status-select\"\r\n                value={state}\r\n                onChange={HandleChange}\r\n              >\r\n                <MenuItem value={IState.TODO}>TODO</MenuItem>\r\n                <MenuItem value={IState.IN_PROGRESS}>In Progress</MenuItem>\r\n                <MenuItem value={IState.IN_REVIEW}>In Review</MenuItem>\r\n                <MenuItem value={IState.DONE}>DONE</MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n\r\n            <DialogActions></DialogActions>\r\n          </Stack>\r\n        </DialogContent>\r\n        <DialogActions sx={{ background: \"#000C66\" }}>\r\n          <Button\r\n            onClick={handleClose}\r\n            autoFocus\r\n            sx={{ background: \"#050A30\" }}\r\n            variant=\"contained\"\r\n          >\r\n            Save\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n","import React, { ReactElement } from \"react\";\r\nimport { ITask } from \"../models/ITask\";\r\n\r\ninterface Props {\r\n  task: ITask;\r\n}\r\n\r\nexport default function BoardTask({ task }: Props): ReactElement {\r\n  return <div style={{ color: \"white\" }}>{task.name}</div>;\r\n}\r\n","import React, { useState } from \"react\";\r\nimport \"./App.css\";\r\nimport AppBar from \"@mui/material/AppBar\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Toolbar from \"@mui/material/Toolbar\";\r\nimport CreateTaskPopup from \"./CreateTaskPopup\";\r\nimport { IState, ITask } from \"./models/ITask\";\r\nimport BoardTask from \"./components/BoardTask\";\r\n\r\nfunction App() {\r\n  const [tasks, setTasks] = useState<ITask[]>([]);\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <AppBar position=\"static\" sx={{ background: \"#050A30\" }}>\r\n          <Toolbar>\r\n            <Typography\r\n              variant=\"h4\"\r\n              sx={{ flexGrow: 1 }}\r\n              style={{ fontWeight: 600 }}\r\n            >\r\n              The Navy Board\r\n            </Typography>\r\n          </Toolbar>\r\n        </AppBar>\r\n      </div>\r\n\r\n      <div className=\"container\">\r\n        <div className=\"todo\">\r\n          <AppBar position=\"static\" sx={{ background: \"#7EC8E3\" }}>\r\n            <Toolbar>\r\n              <Typography\r\n                variant=\"h4\"\r\n                sx={{ flexGrow: 1, textAlign: \"center\", color: \"#000C66\" }}\r\n                style={{ fontWeight: 600 }}\r\n              >\r\n                TO DO\r\n              </Typography>\r\n            </Toolbar>\r\n          </AppBar>\r\n          <CreateTaskPopup\r\n            onSave={(newTask: ITask) => {\r\n              setTasks((oldTasks) => [...oldTasks, newTask]);\r\n            }}\r\n          />\r\n          {tasks\r\n            .filter((t) => t.state === IState.TODO)\r\n            .map((task) => (\r\n              <BoardTask task={task} />\r\n            ))}\r\n        </div>\r\n\r\n        <div className=\"inprogress\">\r\n          <AppBar position=\"static\" sx={{ background: \"#7EC8E3\" }}>\r\n            <Toolbar>\r\n              <Typography\r\n                variant=\"h4\"\r\n                sx={{ flexGrow: 1, textAlign: \"center\", color: \"#000C66\" }}\r\n                style={{ fontWeight: 600 }}\r\n              >\r\n                IN PROGRESS\r\n              </Typography>\r\n            </Toolbar>\r\n          </AppBar>\r\n          <CreateTaskPopup\r\n            onSave={(newTask: ITask) => {\r\n              setTasks((oldTasks) => [...oldTasks, newTask]);\r\n            }}\r\n          />\r\n          {tasks\r\n            .filter((t) => t.state === IState.IN_PROGRESS)\r\n            .map((task) => (\r\n              <BoardTask task={task} />\r\n            ))}\r\n        </div>\r\n\r\n        <div className=\"inreview\">\r\n          <AppBar position=\"static\" sx={{ background: \"#7EC8E3\" }}>\r\n            <Toolbar>\r\n              <Typography\r\n                variant=\"h4\"\r\n                sx={{ flexGrow: 1, textAlign: \"center\", color: \"#000C66\" }}\r\n                style={{ fontWeight: 600 }}\r\n              >\r\n                IN REVIEW\r\n              </Typography>\r\n            </Toolbar>\r\n          </AppBar>\r\n          <CreateTaskPopup\r\n            onSave={(newTask: ITask) => {\r\n              setTasks((oldTasks) => [...oldTasks, newTask]);\r\n            }}\r\n          />\r\n          {tasks\r\n            .filter((t) => t.state === IState.IN_REVIEW)\r\n            .map((task) => (\r\n              <BoardTask task={task} />\r\n            ))}\r\n        </div>\r\n\r\n        <div className=\"done\">\r\n          <AppBar position=\"static\" sx={{ background: \"#7EC8E3\" }}>\r\n            <Toolbar>\r\n              <Typography\r\n                variant=\"h4\"\r\n                sx={{ flexGrow: 1, textAlign: \"center\", color: \"#000C66\" }}\r\n                style={{ fontWeight: 600 }}\r\n              >\r\n                DONE\r\n              </Typography>\r\n            </Toolbar>\r\n          </AppBar>\r\n          <CreateTaskPopup\r\n            onSave={(newTask: ITask) => {\r\n              setTasks((oldTasks) => [...oldTasks, newTask]);\r\n            }}\r\n          />\r\n          {tasks\r\n            .filter((t) => t.state === IState.DONE)\r\n            .map((task) => (\r\n              <BoardTask task={task} />\r\n            ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}