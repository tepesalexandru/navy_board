{"version":3,"sources":["models/ITask.tsx","CreateTaskPopup.tsx","components/BoardTask.tsx","App.tsx","index.tsx"],"names":["IState","useStyles","makeStyles","theme","formControl","margin","spacing","minWidth","borderRadius","CreateTaskPopup","open","setOpen","taskSelected","setTaskSelected","setTasks","tasks","classes","useState","TODO","state","setState","name","setName","description","setDescription","assignee","setAssignee","useEffect","Box","sx","display","justifyContent","Stack","direction","Dialog","onClose","undefined","maxWidth","fullWidth","DialogTitle","id","background","color","DialogContent","Input","placeholder","width","value","onChange","e","target","FormControl","className","Select","labelId","event","MenuItem","IN_PROGRESS","IN_REVIEW","DONE","DialogActions","Button","onClick","newTask","Math","floor","random","taskIndex","findIndex","task","oldTasks","autoFocus","variant","BoardTask","padding","cursor","flexDirection","gap","alignItems","App","AppBar","position","Toolbar","Typography","flexGrow","style","fontWeight","textAlign","endIcon","filter","t","map","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.03b2b323.chunk.js","sourcesContent":["export enum IState {\r\n    TODO,\r\n    IN_PROGRESS,\r\n    IN_REVIEW,\r\n    DONE\r\n}\r\n\r\nexport type ITask = {\r\n    id: string;\r\n    name: string;\r\n    description: string;\r\n    assignee: string;\r\n    state: IState;\r\n}","import React, { useEffect, useState } from \"react\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Dialog from \"@mui/material/Dialog\";\r\nimport DialogActions from \"@mui/material/DialogActions\";\r\nimport DialogContent from \"@mui/material/DialogContent\";\r\nimport DialogTitle from \"@mui/material/DialogTitle\";\r\nimport { Box, Input, Stack } from \"@mui/material\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport { MenuItem } from \"@mui/material\";\r\nimport FormControl from \"@mui/material/FormControl\";\r\nimport Select from \"@mui/material/Select\";\r\nimport { IState, ITask } from \"./models/ITask\";\r\n\r\nconst useStyles = makeStyles((theme: any) => ({\r\n  formControl: {\r\n    margin: (theme.spacing = \"2\"),\r\n    minWidth: 200,\r\n    borderRadius: \"5px\",\r\n  },\r\n}));\r\n\r\ntype Props = {\r\n  open: boolean;\r\n  setOpen: (state: boolean) => void;\r\n  taskSelected?: ITask;\r\n  setTaskSelected: (task: ITask | undefined) => void;\r\n  setTasks: any;\r\n  tasks: ITask[];\r\n};\r\n\r\nexport default function CreateTaskPopup({\r\n  open,\r\n  setOpen,\r\n  taskSelected,\r\n  setTaskSelected,\r\n  setTasks,\r\n  tasks,\r\n}: Props) {\r\n  const classes = useStyles();\r\n  const [state, setState] = useState<IState>(IState.TODO);\r\n  const [name, setName] = useState(\"\");\r\n  const [description, setDescription] = useState(\"\");\r\n  const [assignee, setAssignee] = useState(\"\");\r\n\r\n  const HandleChange = (event: any) => {\r\n    setState(event.target.value);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (taskSelected) {\r\n      setOpen(true);\r\n      setName(taskSelected.name);\r\n      setDescription(taskSelected.description);\r\n      setAssignee(taskSelected.assignee);\r\n      setState(taskSelected.state);\r\n    }\r\n  }, [taskSelected]);\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n    setTaskSelected(undefined);\r\n  };\r\n\r\n  const saveTask = () => {\r\n    let newTask: ITask = {\r\n      id: `${Math.floor(Math.random() * 200000)}`,\r\n      name,\r\n      description,\r\n      assignee,\r\n      state,\r\n    };\r\n    if (newTask.name === \"\" || newTask.assignee === \"\") return;\r\n\r\n    if (taskSelected) {\r\n      let taskIndex = tasks.findIndex(\r\n        (task: ITask) => task.id === taskSelected.id\r\n      );\r\n      const oldTasks = [...tasks];\r\n      if (taskIndex > -1) {\r\n        oldTasks[taskIndex] = { ...newTask };\r\n      }\r\n      setTasks(oldTasks);\r\n    } else {\r\n      setTasks((oldTasks: ITask[]) => [...oldTasks, newTask]);\r\n    }\r\n    setOpen(false);\r\n    setTaskSelected(undefined);\r\n    setName(\"\");\r\n    setDescription(\"\");\r\n    setAssignee(\"\");\r\n    setState(IState.TODO);\r\n  };\r\n\r\n  return (\r\n    <Box sx={{ display: \"flex\", justifyContent: \"flex-end\" }}>\r\n      <Stack spacing={2} direction=\"row\"></Stack>\r\n      <Dialog\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"alert-dialog-title\"\r\n        aria-describedby=\"alert-dialog-description\"\r\n        maxWidth=\"md\"\r\n        fullWidth\r\n      >\r\n        <DialogTitle\r\n          id=\"alert-dialog-title\"\r\n          sx={{ background: \"#000C66\" }}\r\n          color=\"white\"\r\n        >\r\n          {\"New task\"}\r\n        </DialogTitle>\r\n        <DialogContent sx={{ background: \"#000C66\" }}>\r\n          <Stack spacing={3}>\r\n            <Input\r\n              placeholder=\"Add a task name\"\r\n              sx={{\r\n                width: \"300px\",\r\n                color: \"white\",\r\n              }}\r\n              value={name}\r\n              onChange={(e) => setName(e.target.value)}\r\n            />\r\n            <Input\r\n              placeholder=\"Add a description...\"\r\n              sx={{\r\n                width: \"300px\",\r\n                color: \"white\",\r\n              }}\r\n              value={description}\r\n              onChange={(e) => setDescription(e.target.value)}\r\n            />\r\n            <Input\r\n              placeholder=\"Add User\"\r\n              sx={{\r\n                width: \"300px\",\r\n                color: \"white\",\r\n              }}\r\n              value={assignee}\r\n              onChange={(e) => setAssignee(e.target.value)}\r\n            />\r\n            <FormControl\r\n              className={classes.formControl}\r\n              sx={{ background: \"white\" }}\r\n            >\r\n              <Select\r\n                labelId=\"select-demo\"\r\n                id=\"status-select\"\r\n                value={state}\r\n                onChange={HandleChange}\r\n                sx={{ background: \"#030936\", color: \"#fff\" }}\r\n              >\r\n                <MenuItem value={IState.TODO}>TODO</MenuItem>\r\n                <MenuItem value={IState.IN_PROGRESS}>In Progress</MenuItem>\r\n                <MenuItem value={IState.IN_REVIEW}>In Review</MenuItem>\r\n                <MenuItem value={IState.DONE}>DONE</MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n\r\n            <DialogActions></DialogActions>\r\n          </Stack>\r\n        </DialogContent>\r\n        <DialogActions sx={{ background: \"#000C66\" }}>\r\n          <Button\r\n            onClick={saveTask}\r\n            autoFocus\r\n            sx={{ background: \"#050A30\" }}\r\n            variant=\"contained\"\r\n          >\r\n            Save\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </Box>\r\n  );\r\n}\r\n","import { Box } from \"@mui/material\";\r\nimport React, { ReactElement } from \"react\";\r\nimport { ITask } from \"../models/ITask\";\r\nimport AssigneeIcon from \"@mui/icons-material/AccountCircle\";\r\n\r\ninterface Props {\r\n  task: ITask;\r\n  onClick: () => void;\r\n}\r\n\r\nexport default function BoardTask({ task, onClick }: Props): ReactElement {\r\n  return (\r\n    <Box\r\n      onClick={onClick}\r\n      sx={{\r\n        color: \"white\",\r\n        background: \"rgba(5, 10, 48, 0.6);\",\r\n        borderRadius: \"4px\",\r\n        padding: \"16px\",\r\n        margin: \"16px 0px\",\r\n        cursor: \"pointer\",\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        gap: \"10px\",\r\n      }}\r\n    >\r\n      <Box>{task.name}</Box>\r\n      <Box\r\n        sx={{\r\n          display: \"flex\",\r\n          alignItems: \"center\",\r\n          justifyContent: \"flex-start\",\r\n          gap: \"10px\",\r\n        }}\r\n      >\r\n        <AssigneeIcon /> {task.assignee}\r\n      </Box>\r\n    </Box>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport \"./App.css\";\r\nimport AppBar from \"@mui/material/AppBar\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Toolbar from \"@mui/material/Toolbar\";\r\nimport CreateTaskPopup from \"./CreateTaskPopup\";\r\nimport { IState, ITask } from \"./models/ITask\";\r\nimport BoardTask from \"./components/BoardTask\";\r\nimport { Box, Button } from \"@mui/material\";\r\nimport AddCircle from \"@mui/icons-material/AddCircleRounded\";\r\n\r\nfunction App() {\r\n  const [tasks, setTasks] = useState<ITask[]>([]);\r\n  const [open, setOpen] = useState(false);\r\n  const [taskSelected, setTaskSelected] = useState<ITask | undefined>(\r\n    undefined\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <AppBar position=\"static\" sx={{ background: \"#050A30\" }}>\r\n          <Toolbar>\r\n            <Typography\r\n              variant=\"h4\"\r\n              sx={{ flexGrow: 1 }}\r\n              style={{ fontWeight: 600 }}\r\n            >\r\n              The Navy Board\r\n            </Typography>\r\n          </Toolbar>\r\n        </AppBar>\r\n      </div>\r\n\r\n      <div className=\"container\">\r\n        <div className=\"todo\">\r\n          <AppBar position=\"static\" sx={{ background: \"#7EC8E3\" }}>\r\n            <Toolbar>\r\n              <Typography\r\n                variant=\"h4\"\r\n                sx={{ flexGrow: 1, textAlign: \"center\", color: \"#000C66\" }}\r\n                style={{ fontWeight: 600 }}\r\n              >\r\n                TO DO\r\n              </Typography>\r\n            </Toolbar>\r\n          </AppBar>\r\n          <Box sx={{ padding: \"16px\" }}>\r\n            <Button\r\n              sx={{ background: \"#050A30\" }}\r\n              variant=\"contained\"\r\n              endIcon={<AddCircle />}\r\n              onClick={() => setOpen(true)}\r\n            >\r\n              Add a task\r\n            </Button>\r\n\r\n            {tasks\r\n              .filter((t) => t.state === IState.TODO)\r\n              .map((task) => (\r\n                <BoardTask task={task} onClick={() => setTaskSelected(task)} />\r\n              ))}\r\n          </Box>\r\n        </div>\r\n\r\n        <div className=\"inprogress\">\r\n          <AppBar position=\"static\" sx={{ background: \"#7EC8E3\" }}>\r\n            <Toolbar>\r\n              <Typography\r\n                variant=\"h4\"\r\n                sx={{ flexGrow: 1, textAlign: \"center\", color: \"#000C66\" }}\r\n                style={{ fontWeight: 600 }}\r\n              >\r\n                IN PROGRESS\r\n              </Typography>\r\n            </Toolbar>\r\n          </AppBar>\r\n          <Box sx={{ padding: \"16px\" }}>\r\n            <Button\r\n              sx={{ background: \"#050A30\" }}\r\n              variant=\"contained\"\r\n              endIcon={<AddCircle />}\r\n              onClick={() => setOpen(true)}\r\n            >\r\n              Add a task\r\n            </Button>\r\n            {tasks\r\n              .filter((t) => t.state === IState.IN_PROGRESS)\r\n              .map((task) => (\r\n                <BoardTask task={task} onClick={() => setTaskSelected(task)} />\r\n              ))}\r\n          </Box>\r\n        </div>\r\n\r\n        <div className=\"inreview\">\r\n          <AppBar position=\"static\" sx={{ background: \"#7EC8E3\" }}>\r\n            <Toolbar>\r\n              <Typography\r\n                variant=\"h4\"\r\n                sx={{ flexGrow: 1, textAlign: \"center\", color: \"#000C66\" }}\r\n                style={{ fontWeight: 600 }}\r\n              >\r\n                IN REVIEW\r\n              </Typography>\r\n            </Toolbar>\r\n          </AppBar>\r\n          <Box sx={{ padding: \"16px\" }}>\r\n            <Button\r\n              sx={{ background: \"#050A30\" }}\r\n              variant=\"contained\"\r\n              endIcon={<AddCircle />}\r\n              onClick={() => setOpen(true)}\r\n            >\r\n              Add a task\r\n            </Button>\r\n            {tasks\r\n              .filter((t) => t.state === IState.IN_REVIEW)\r\n              .map((task) => (\r\n                <BoardTask task={task} onClick={() => setTaskSelected(task)} />\r\n              ))}\r\n          </Box>\r\n        </div>\r\n        <div className=\"done\">\r\n          <AppBar position=\"static\" sx={{ background: \"#7EC8E3\" }}>\r\n            <Toolbar>\r\n              <Typography\r\n                variant=\"h4\"\r\n                sx={{ flexGrow: 1, textAlign: \"center\", color: \"#000C66\" }}\r\n                style={{ fontWeight: 600 }}\r\n              >\r\n                DONE\r\n              </Typography>\r\n            </Toolbar>\r\n          </AppBar>\r\n          <Box sx={{ padding: \"16px\" }}>\r\n            <Button\r\n              sx={{ background: \"#050A30\" }}\r\n              variant=\"contained\"\r\n              endIcon={<AddCircle />}\r\n              onClick={() => setOpen(true)}\r\n            >\r\n              Add a task\r\n            </Button>\r\n            {tasks\r\n              .filter((t) => t.state === IState.DONE)\r\n              .map((task) => (\r\n                <BoardTask task={task} onClick={() => setTaskSelected(task)} />\r\n              ))}\r\n          </Box>\r\n        </div>\r\n      </div>\r\n      <CreateTaskPopup\r\n        tasks={tasks}\r\n        setTasks={setTasks}\r\n        open={open}\r\n        setOpen={setOpen}\r\n        taskSelected={taskSelected}\r\n        setTaskSelected={setTaskSelected}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}